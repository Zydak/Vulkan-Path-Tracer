#version 460

layout (local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform sampler2D uInput;
layout(set = 0, binding = 1, rgba8) uniform image2D uOutput;

layout(set = 0, binding = 2) uniform sampler2D uBlueNoise;

layout(set = 0, binding = 3) uniform sampler2D uPaper;
layout(set = 0, binding = 4) uniform sampler2D uInk;
layout(set = 0, binding = 5) uniform sampler2D uDepth;

struct Info
{
	int NoiseCenterPixelWeight;
	int NoiseSampleRange;

	float LuminanceBias;
};

layout(push_constant) uniform PushConstants
{
	Info pInfo;
};

float CalculateLuminance(vec3 rgb)
{
    return 0.212671f * rgb.r + 0.715160f * rgb.g + 0.072169f * rgb.b;
}

// Determine if the coords are the edge based on depth framebuffer
bool IsEdge(sampler2D depthTexture, ivec2 coords)
{
	float color = (1.0f - texelFetch(depthTexture, coords, 0).r) * 1000.0f;
	
	bool edge = false;
	int range = 1;
	float neighbourColors = 0.0f;
	for (int i = -range; i <= range; i++)
	{
		for (int j = -range; j <= range; j++)
		{
			neighbourColors += (1.0f - texelFetch(depthTexture, coords + ivec2(i, j), 0).r) * 1000.0f;
			
		}
	}
	neighbourColors /= 9;
	if (abs(color - neighbourColors) > 0.01f)
	{
		edge = true;
	}
	
	return edge;
}

float SampleBlueNoise(sampler2D texture, ivec2 coords, float centerWeight, int sampleRange)
{
	float neighbourColors = 0.0f;
	neighbourColors += texelFetch(texture, (coords + ivec2( 0,  0)) % 512, 0).r * centerWeight;

	for(int i = -sampleRange; i < sampleRange; i++)
	{
		if (i == 0)
			continue;
			
		neighbourColors += texelFetch(texture, (coords + ivec2(i, 0)) % 512, 0).r;
	}

	for(int i = -sampleRange; i < sampleRange; i++)
	{
		if (i == 0)
			continue;
			
		neighbourColors += texelFetch(texture, (coords + ivec2(0, i)) % 512, 0).r;
	}

	neighbourColors /= centerWeight + (sampleRange * 4);

	return neighbourColors;
}

void main() 
{
    if(gl_GlobalInvocationID.xy != clamp(gl_GlobalInvocationID.xy, vec2(0.0F), imageSize(uOutput)))
		return;

	vec2 pixelCoord = vec2(gl_GlobalInvocationID.xy) + vec2(0.5f);
	vec2 textureSize = vec2(textureSize(uInput, 0));
	vec2 texCoord = pixelCoord / textureSize;

    vec3 color = texelFetch(uInput, ivec2(gl_GlobalInvocationID.xy), 0).rgb;
    float blueNoise = SampleBlueNoise(uBlueNoise, ivec2(gl_GlobalInvocationID.xy), pInfo.NoiseCenterPixelWeight, pInfo.NoiseSampleRange);

	float luminance = CalculateLuminance(color) + pInfo.LuminanceBias; // luminance + some bias for better look

	if (luminance < blueNoise)
	{
		color = vec3(0.0f);
	}
	else
	{
		color = vec3(1.0f);
	}

	float edge = float(IsEdge(uDepth, ivec2(gl_GlobalInvocationID.xy)));

	color = vec3(max(color - edge, 0.0f));

	if (color.r == 0.0f)
	{
		color = texture(uInk, texCoord).rgb;
	}
	else
	{
		color *= texture(uPaper, texCoord).rgb;
	}

    imageStore(uOutput, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0f));
}