#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_ARB_shader_clock : enable
#extension GL_EXT_ray_query : enable

#include "raycommon.glsl"

// clang-format off
layout(location = 0) rayPayloadEXT hitPayload payload;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba32f) uniform image2D image;
layout(set = 0, binding = 8) buffer DOFUniform { float dof; };
layout(set = 1, binding = 0) uniform _GlobalUniforms { GlobalUniforms uni; };
layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };
// clang-format on

void main()
{
    uint seed = gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x + int(clockARB());
    payload.Seed = PCG(seed);

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2       d           = inUV * 2.0 - 1.0;

    vec4 origin    = uni.ViewInverse * vec4(0, 0, 0, 1);
    vec4 target    = uni.ProjInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = uni.ViewInverse * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

    vec3 finalHitValue = vec3(0);

    payload.HitValue = vec3(0.0);
    payload.Depth = 0;
    payload.RayOrigin = origin.xyz;
    payload.RayDirection = direction.xyz;
    payload.Weight = vec3(0.0);
    payload.MissedAllGeometry = false;

    if (gl_LaunchIDEXT.xy == (gl_LaunchSizeEXT.xy / 2))
    {
        rayQueryEXT query;
		rayQueryInitializeEXT(query, topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT, 0xFF, origin.xyz, tMin, direction.xyz, tMax);
		rayQueryProceedEXT(query);
		if (rayQueryGetIntersectionTypeEXT(query, true) != gl_RayQueryCommittedIntersectionNoneEXT)
		{
            float prevDof = dof;
			dof = rayQueryGetIntersectionTEXT(query, true);
		}
    }

    vec3 curWeight = vec3(1);
    vec3 hitValue  = vec3(0);

    int samplesAccumulated = 0;
    
    const vec3 camRight = vec3(uni.ViewInverse[0][0], uni.ViewInverse[1][0], uni.ViewInverse[2][0]);
    const vec3 camUp = vec3(uni.ViewInverse[0][1], uni.ViewInverse[1][1], uni.ViewInverse[2][1]);
    for (int i = 0; i < pcRay.SamplesPerFrame; i++)
    {
        samplesAccumulated++;
        ivec2 outputImageSize = imageSize(image);
        payload.HitValue = vec3(0.0);
        payload.Depth = 0;
        payload.Pdf = 0.0f;
        payload.Bsdf = vec3(0.0f);

        // Applying small jitter for anti aliasing
        vec2 antiAliasingJitter = (RandomPointInCircle(payload.Seed) * 0.25f / outputImageSize.x) * pcRay.AliasingJitter;
        direction.xyz += camRight * antiAliasingJitter.x + camUp * antiAliasingJitter.y;

        vec3 focalPoint = origin.xyz + normalize(direction.xyz) * pcRay.FocalLenght;
        vec2 jitter = RandomPointInCircle(payload.Seed) * pcRay.DoFStrenght / 500.0f;
        payload.RayOrigin = origin.xyz + camRight * jitter.x + camUp * jitter.y;

        payload.RayDirection = normalize(focalPoint - payload.RayOrigin);
        payload.Weight = vec3(0.0);

        vec3 curWeight = vec3(1);
        vec3 hitValue  = vec3(0);

        for(; payload.Depth < pcRay.MaxDepth; payload.Depth++)
        {
            traceRayEXT(
                topLevelAS,        // acceleration structure
                rayFlags,          // rayFlags
                0xFF,              // cullMask
                0,                 // sbtRecordOffset
                0,                 // sbtRecordStride
                0,                 // missIndex
                payload.RayOrigin,     // ray origin
                tMin,              // ray min range
                payload.RayDirection,  // ray direction
                tMax,              // ray max range
                0                  // payload (location = 0)
            );
            
            hitValue += payload.HitValue * curWeight;
            curWeight *= payload.Weight;

            float rrPcont = min(max(curWeight.x, max(curWeight.y, curWeight.z)) + 0.001, 0.95);
            if(Rnd(payload.Seed) >= rrPcont)
                break;  // paths with low throughput that won't contribute
            curWeight /= rrPcont;
        }

#ifdef USE_FIREFLIES
        // Eliminate fireflies
        const float maxLuminance = 50.0f;
        float lum = dot(hitValue, vec3(0.212671f, 0.715160f, 0.072169f));
        if(lum > maxLuminance)
        {
            hitValue *= maxLuminance / lum;
        }
#endif

        finalHitValue += hitValue;

        seed = gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x + payload.Seed;
        payload.Seed = PCG(seed);

        if (payload.MissedAllGeometry)
		{
			break;
		}

    }
    finalHitValue /= float(samplesAccumulated);

    if (!(isnan(finalHitValue).x || isnan(finalHitValue).y || isnan(finalHitValue).y))
    {
        if (pcRay.Frame > 0)
        {
            float a  = 1.0f / float(pcRay.Frame + 1);
            vec3 oldColor = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
            imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(oldColor, finalHitValue, a), 1.f));
        }
        else
        {
            imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(finalHitValue, 1.f));
        }
    }
}