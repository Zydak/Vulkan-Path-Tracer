#version 460

#extension GL_EXT_scalar_block_layout : enable

layout (local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0) uniform sampler2D uInput;
layout(set = 0, binding = 1, rgba8) uniform image2D uOutput;

struct Info
{
	int ColorsCount;
	float DitherSpread;
	int DitherSize;

	vec4 Colors[8];
};

layout(push_constant, scalar) uniform PushConstants
{
	Info pInfo;
};

float CalculateLuminance(vec3 rgb)
{
    return 0.212671f * rgb.r + 0.715160f * rgb.g + 0.072169f * rgb.b;
}

const vec4 bayer4[4] = {
    vec4(0, 8, 2,  10),
    vec4(12, 4, 14, 6),
    vec4(3, 11, 1,  9),
    vec4(15, 7, 13, 5)
};

void main() 
{
    if(gl_GlobalInvocationID.xy != clamp(gl_GlobalInvocationID.xy, vec2(0.0F), imageSize(uOutput)))
		return;

	vec2 pixelCoord = vec2(gl_GlobalInvocationID.xy) + vec2(0.5f);
	vec2 textureSize = vec2(textureSize(uInput, 0));
	vec2 texCoord = pixelCoord / textureSize;

    vec3 color = texelFetch(uInput, ivec2(gl_GlobalInvocationID.xy), 0).rgb;

    // Dithering
    ivec2 position = ivec2(gl_GlobalInvocationID.xy / pInfo.DitherSize) % 4;
    float M = bayer4[position.x][position.y];
    M = M * (1.0f / 16.0f) - 0.5f;

    color += pInfo.DitherSpread * M;

    // Quantization
	color = floor(color * (pInfo.ColorsCount - 1) + 0.5f) / (pInfo.ColorsCount - 1);

#ifdef REPLACE_PALLET
    // GrayScale value
    color = vec3(CalculateLuminance(color));

    // choose color from pallet
    int colorIndex = int(clamp(color * float(pInfo.ColorsCount-1), 0, pInfo.ColorsCount-1));
    color = pInfo.Colors[colorIndex].rgb;
#endif

    imageStore(uOutput, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0f));
}